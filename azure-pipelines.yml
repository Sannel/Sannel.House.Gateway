trigger:
- master
- develop

variables:
  sdk_version: 3.0.x
  dockerRepositoryRoot: sannel
  dockerRepositoryName: house.gateway
  dockerTagBase: $(Build.SourceBranchName)-$(Build.BuildId)
  imageName: $(dockerRepositoryRoot)/$(dockerRepositoryName):$(dockerTagBase)
  projectFolder: Sannel.House.Gateway
  mainProjectPath: src/$(projectFolder)/$(projectFolder).csproj
  mainConfigPath: src/$(projectFolder)/app_config
  tagVersion: 3.0
  tagCodeName: buster
  hasTests: false
  disableLinux: false
  disableArm64: false
  disableWindows: false
  disableOSX: true

name: $(date:yyyy.MM.dd)$(rev:.rr)

jobs:
- job: 'osx'
  pool:
    vmImage: macOS-10.13
  condition: ne(variables['disableOSX'], 'true')
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk $(sdk_version)'
    inputs:
      packageType: 'sdk'
      version: '$(sdk_version)'
      includePreviewVersions: false
  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: custom
      projects: src/**/*.csproj
      custom: restore
      arguments: '-r osx-x64 --configfile .nuget/nuget.config'
      feedsToUse: config
      nugetConfigPath: .nuget/nuget.config
      externalFeedCredentials: 'Sannel House MyGet'
  - task: DotNetCoreCLI@2
    displayName: 'dotnet build Release'
    inputs:
      projects: $(mainProjectPath)
      arguments: '-r osx-x64 -c Release'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  - task: DotNetCoreCLI@2
    displayName: 'dotnet build Debug'
    inputs:
      projects: $(mainProjectPath)
      arguments: '-r osx-x64 -c Debug'
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
  - task: DotNetCoreCLI@2
    displayName: 'dotnet publish'
    inputs:
      command: publish
      publishWebProjects: false
      projects: $(mainProjectPath)
      arguments: '-r osx-x64 -o $(Build.StagingDirectory)'
      zipAfterPublish: false
  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: custom
      projects: '**/*Tests.csproj'
      custom: restore
      arguments: '-r osx-x64 --configfile .nuget/nuget.config'
      feedsToUse: config
      nugetConfigPath: .nuget/nuget.config
      externalFeedCredentials: 'Sannel House MyGet'
    condition: eq(variables['hasTests'], 'true')
  - task: DotNetCoreCLI@2
    displayName: 'dotnet test'
    inputs:
      projects: '**/*Tests.csproj'
      command: test
      arguments: '--collect "Code coverage"'
      publishTestResults: true
    condition: eq(variables['hasTests'], 'true')
  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.StagingDirectory)/$(projectFolder)/app_config/'
    inputs:
      SourceFolder: '$(mainConfigPath)'
      Contents: |
        **/*.json
        **/*.yml
        **/*.pfx
        **/*.crt
      TargetFolder: '$(Build.StagingDirectory)/$(projectFolder)/app_config/'
  - powershell: |
      New-Item -Type Directory -Force $(Build.StagingDirectory)/$(projectFolder)/app_data/
      New-Item -Type File -Force $(Build.StagingDirectory)/$(projectFolder)/app_data/.hold
    displayName: 'Prepare Items'
  - task: PublishPipelineArtifact@0
    displayName: 'Publish Pipeline Artifact'
    inputs:
      artifactName: 'osx-x64'
      targetPath: '$(Build.StagingDirectory)'

- template: build/tasks/linux-arm.yaml
  parameters:
    arch: arm32
    archLong: arm32v7
    qemuStatic: qemu-arm-static
  condition: ne(variables['disableLinux'], 'true')

- template: build/tasks/linux-arm.yaml
  parameters:
    arch: arm64
    archLong: arm64v8
  condition: and(ne(variables['disableLinux'], 'true'), ne(variables['disableArm64'], 'true'))

- template: build/tasks/linux.yaml
  condition: ne(variables['disableLinux'], 'true')

- template: build/tasks/windows.yaml
  parameters:
    release: '1803'
    arch: 'x64'

- template: build/tasks/windows.yaml
  parameters:
    pool:
      vmImage: 'windows-2019'
    release: '1803'
    arch: 'x64'

- template: build/tasks/windows.yaml
  parameters:
    pool:
      vmImage: 'windows-2019'
    release: '1809'
    arch: 'x64'

- template: build/tasks/windows.yaml
  parameters:
    pool: '1903'
    release: '1903'
    arch: 'x64'

- template: build/tasks/windows.yaml
  parameters:
    pool:
      vmImage: 'windows-2019'
    release: '1809'
    arch: 'arm'